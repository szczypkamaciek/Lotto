{"version":3,"sources":["components/AppWrapper/Input/Input.module.css","components/AppWrapper/AppWrapper.module.scss","components/AppWrapper/Hint/Hint.module.scss","App.module.scss","components/AppWrapper/Button/Button.module.scss","components/AppWrapper/Button/Button.js","components/AppWrapper/Hint/Hint.js","components/AppWrapper/Input/Input.js","components/AppWrapper/AppWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","buttonFn","type","children","className","styles","button","onClick","Hint","hint","hintQuestionMark","hintText","Input","number","wrapper","input","maxLength","name","label","htmlFor","formItemBar","AppWrapper","state","fetchedData","props","data","Lotto","numerki","split","inputNumber","compare","a","array","hits","i","length","includes","push","console","log","handleButton","e","preventDefault","target","value","addInput","counter","setState","removeInput","inputs","this","key","onSubmit","inputWrapper","btnWrapper","React","Component","App","error","loading","b","concat","fetch","then","res","ok","json","Promise","reject","catch","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06a18a34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Input_wrapper__H6YPW\",\"formItemBar\":\"Input_formItemBar__238qJ\",\"label\":\"Input_label__2vobE\",\"input\":\"Input_input__I7spn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppWrapper_wrapper__1nRj6\",\"inputWrapper\":\"AppWrapper_inputWrapper__1zz4o\",\"btnWrapper\":\"AppWrapper_btnWrapper__24a8N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint\":\"Hint_hint__2qgao\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__RCHjb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__10T0K\"};","import React from 'react';\nimport styles from './Button.module.scss';\n\nconst Button = ({buttonFn, type, children}) => (\n    <button type={type} className={styles.button} onClick={buttonFn}>{children}</button>\n);\n\nexport default Button;","import React from 'react';\nimport styles from './Hint.module.scss';\n\n\nconst Hint = () => (\n    <p className={styles.hint}>\n        <span className={styles.hintQuestionMark}>?</span>\n        <span className={styles.hintText}>Liczby powinny być zapisane po przecinkach i bez spacji.</span>\n    </p>\n);\n\nexport default Hint;","import React from 'react';\nimport styles from './Input.module.css';\n\nconst Input = ({number}) => (\n    <div className={styles.wrapper}>\n        <input\n            className={styles.input}\n            maxLength=\"17\"\n            name={\"Input\"+number}\n        />\n        <label className={styles.label} htmlFor={\"Input\"+number}>\n            Zestaw {number+1}:\n        </label>\n        <div className={styles.formItemBar} />\n    </div>\n);\n\nexport default Input;\n","import React from 'react';\nimport styles from './AppWrapper.module.scss';\nimport Button from './Button/Button';\nimport Hint from \"./Hint/Hint\";\nimport Input from \"./Input/Input\";\n\n\nclass AppWrapper extends React.Component {\n    state = {\n        fetchedData: this.props.data.Lotto.numerki.split(\",\"),\n        inputNumber: 1\n    };\n    compare = (a) => {\n        let array = a.split(\",\");\n        let hits = [];\n        for (let i = 0; i < array.length; i++) {\n            if (this.state.fetchedData.includes(array[i])) {\n                hits.push(array[i]);\n            }\n        }\n        console.log(array, hits);\n    };\n\n    handleButton = (e) => {\n        e.preventDefault();\n        for (let i = 0; i < this.state.inputNumber; i++) {\n            console.log(e.target[i].value);\n            console.log(this.state.fetchedData);\n            this.compare(e.target[i].value);\n        }\n    };\n\n    addInput = (e) => {\n        e.preventDefault();\n        let counter = ++this.state.inputNumber;\n        this.setState({\n            inputNumber: counter\n        })\n    };\n    removeInput = (e) => {\n        e.preventDefault();\n        let counter = --this.state.inputNumber;\n        this.setState({\n            inputNumber: counter\n        })\n    };\n\n    render() {\n        let inputs = [];\n        for (let i = 0; i < this.state.inputNumber; i++) {\n            inputs.push(<Input number={i} fetchedData={this.state.fetchedData} key={i}/>)\n        }\n        return (\n            <form onSubmit={this.handleButton} className={styles.wrapper}>\n                <label htmlFor=\"liczby\">Wpisz tutaj swoje liczby: </label>\n\n                <div className={styles.inputWrapper}>\n                    {inputs}\n                </div>\n\n                <Hint />\n                <div className={styles.btnWrapper}>\n                    <Button buttonFn={this.addInput}>+</Button>\n                    <Button buttonFn={this.removeInput}>-</Button>\n                    <Button type=\"submit\">Sprawdź!</Button>\n                </div>\n\n            </form>\n        );\n    }\n}\n\n\nexport default AppWrapper;","import React from 'react';\nimport styles from './App.module.scss';\nimport AppWrapper from \"./components/AppWrapper/AppWrapper\";\n\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        error: null,\n        loading: false,\n        inputs: 3\n    };\n\n   componentDidMount() {\n        fetch(`https://jsonp.afeld.me/?callback=&url=http%3A%2F%2Fserwis.mobilotto.pl%2Fmapi_v6%2Findex.php%3Fjson%3DgetGames%26fbclid%3DIwAR2nAx0aMaXt5sNPEUa2xV9pKcWG6X_f4beUEMG6CPRdYoBBmnlxL8K11mQ`)\n           .then(res => {\n               if (res.ok) {\n                   return res.json()\n               } else {\n                   return Promise.reject(res)\n               }\n           })\n           .then(res => this.setState({\n               data: res,\n               loading: true\n           }))\n           .catch(() => this.setState({ error: true }));\n    };\n\n    compare = (a, b) => { //a - tablica podana przez uzytkownika, b- tablica z wynikami wygranych\n        for (let i = 0; i < a.length; i++) {\n            if (b.includes(a[i])) {\n                this.setState({\n                    hits: this.concat(a[i])\n                });\n            }\n        }\n    };\n\n    render() {\n\n        if (this.state.loading) {\n\n            return (\n                <div className={styles.wrapper}>\n                    <div className=\"first-section\">\n                        <p> Sprawdź swoją liczbę w Lotto! </p>\n                    </div>\n                    <AppWrapper data={this.state.data}/>\n\n\n                    <div className=\"third-section\">\n                        <p id=\"komunikat\"> Powodzenia !!!</p>\n                    </div>\n                    <div id=\"informacje\" className=\"third-section\">\n\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className={styles.wrapper}>\n                    Pobieranie aktualnych wyników Lotto.\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}