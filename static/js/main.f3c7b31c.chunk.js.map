{"version":3,"sources":["components/AppWrapper/AppWrapper.module.scss","App.module.scss","components/AppWrapper/AppWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","numbers","React","createRef","AppWrapper","handleButtonFn","className","styles","wrapper","htmlFor","type","name","ref","hint","hintQuestionMark","hintText","button","id","value","onClick","App","state","data","userData","hits","error","loading","compare","a","b","i","length","includes","setState","concat","handleButton","console","log","fetch","then","res","ok","json","Promise","reject","catch","this","Lotto","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,KAAO,yBAAyB,OAAS,6B,qBCAjGD,EAAOC,QAAU,CAAC,QAAU,uB,4MCExBC,EAAUC,IAAMC,YAaLC,EAXI,SAAC,GAAD,IAAEC,EAAF,EAAEA,eAAF,OACf,yBAAKC,UAAWC,IAAOC,SACnB,2BAAOC,QAAQ,UAAf,8BACA,2BAAOC,KAAK,SAASC,KAAK,SAASC,IAAKX,IAExC,uBAAGK,UAAWC,IAAOM,MAAM,0BAAMP,UAAWC,IAAOO,kBAAxB,KAAkD,0BAAMR,UAAWC,IAAOQ,UAAxB,kEAC7E,2BAAOT,UAAWC,IAAOS,OAAQN,KAAK,SAASO,GAAG,SAASC,MAAM,gBAAWC,QAASd,MCuD9Ee,E,2MA5DXC,MAAQ,CACJC,KAAM,GACNC,SAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACrBC,KAAM,GACNC,MAAO,KACPC,SAAS,G,EAmBbC,QAAU,SAACC,EAAGC,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAEG,OAAQD,IACtBD,EAAEG,SAASJ,EAAEE,KACb,EAAKG,SAAS,CACVT,KAAM,EAAKU,OAAON,EAAEE,O,EAMpCK,aAAe,WACbC,QAAQC,IAAI,6B,mFA3BM,IAAD,OACfC,MAAM,2LACFC,MAAK,SAAAC,GACF,OAAIA,EAAIC,GACGD,EAAIE,OAEJC,QAAQC,OAAOJ,MAG7BD,MAAK,SAAAC,GAAG,OAAI,EAAKP,SAAS,CACvBX,KAAMkB,EACNd,SAAS,OAEZmB,OAAM,kBAAM,EAAKZ,SAAS,CAAER,OAAO,S,+BAqBvC,OAHIqB,KAAKzB,MAAMK,SACXU,QAAQC,IAAIS,KAAKzB,OAGjB,yBAAKf,UAAWC,IAAOC,SACnB,yBAAKF,UAAU,iBACX,8EAEJ,kBAAC,EAAD,CAAYgB,KAAMwB,KAAKzB,MAAMC,KAAKyB,MAAO1C,eAAgByC,KAAKX,aAAcZ,SAAUuB,KAAKzB,MAAME,WAEjG,yBAAKjB,UAAU,iBACX,uBAAGW,GAAG,aAAN,oBAEJ,yBAAKA,GAAG,aAAaX,UAAU,uB,GArD7BJ,IAAM8C,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.f3c7b31c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppWrapper_wrapper__1nRj6\",\"hint\":\"AppWrapper_hint__3Tes4\",\"button\":\"AppWrapper_button__qpez3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__RCHjb\"};","import React from 'react';\nimport styles from './AppWrapper.module.scss';\n\nlet numbers = React.createRef();\n\nconst AppWrapper = ({handleButtonFn}) => (\n    <div className={styles.wrapper}>\n        <label htmlFor=\"liczby\">Wpisz tutaj swoje liczby: </label>\n        <input type=\"string\" name=\"liczby\" ref={numbers}/>\n\n        <p className={styles.hint}><span className={styles.hintQuestionMark}>?</span><span className={styles.hintText}>Liczby powinny być zapisane po przecinkach i bez spacji.</span></p>\n        <input className={styles.button} type=\"button\" id=\"button\" value=\"Sprawdź!\" onClick={handleButtonFn}/>\n    </div>\n);\n\n\nexport default AppWrapper;","import React from 'react';\nimport styles from './App.module.scss';\nimport AppWrapper from \"./components/AppWrapper/AppWrapper\";\n\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        userData: [1,2,3,4,5,6],\n        hits: [],\n        error: null,\n        loading: false\n    };\n\n   componentDidMount() {\n        fetch(`https://jsonp.afeld.me/?callback=&url=http%3A%2F%2Fserwis.mobilotto.pl%2Fmapi_v6%2Findex.php%3Fjson%3DgetGames%26fbclid%3DIwAR2nAx0aMaXt5sNPEUa2xV9pKcWG6X_f4beUEMG6CPRdYoBBmnlxL8K11mQ`)\n           .then(res => {\n               if (res.ok) {\n                   return res.json()\n               } else {\n                   return Promise.reject(res)\n               }\n           })\n           .then(res => this.setState({\n               data: res,\n               loading: true\n           }))\n           .catch(() => this.setState({ error: true }));\n    };\n\n    compare = (a, b) => { //a - tablica podana przez uzytkownika, b- tablica z wynikami wygranych\n        for (let i = 0; i < a.length; i++) {\n            if (b.includes(a[i])) {\n                this.setState({\n                    hits: this.concat(a[i])\n                });\n            }\n        }\n    };\n\n    handleButton = () => {\n      console.log(\"handleButton działa\");\n    };\n\n    render() {\n        if (this.state.loading) {\n            console.log(this.state)\n        }\n        return (\n            <div className={styles.wrapper}>\n                <div className=\"first-section\">\n                    <p> Sprawdź swoją liczbę w Lotto! </p>\n                </div>\n                <AppWrapper data={this.state.data.Lotto} handleButtonFn={this.handleButton} userData={this.state.userData}/>\n\n                <div className=\"third-section\">\n                    <p id=\"komunikat\"> Powodzenia !!!</p>\n                </div>\n                <div id=\"informacje\" className=\"third-section\">\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}